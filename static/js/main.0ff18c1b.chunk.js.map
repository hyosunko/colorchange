{"version":3,"sources":["BoxItem.js","BoxList.js","BoxAdder.js","App.js","serviceWorker.js","index.js"],"names":["BoxItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","colorChanger","colorlist","_this$state","state","click","color","Math","floor","random","length","setState","sectionStyle","background","react_default","a","createElement","style","className","onClick","bind","Component","Box","console","log","boxNo","_this2","i","push","map","src_BoxItem","BoxAdder","boxArray","pop","id","addBox","removeBox","App","boxNum","colors","e","updateNumber","target","value","BoxList","src_BoxAdder","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ff18c1b.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass BoxItem extends Component {\n  constructor(props){\n    super(props)\n    this.state ={\n      color: this.props.colorlist[Math.floor(Math.random()*this.props.colorlist.length)],\n      click: 0,\n    }\n\n  }\n\n\n  colorChanger = (props) => {\n    var colorlist = this.props.colorlist\n    var { click, color} = this.state\n    click=Math.floor(Math.random()*colorlist.length)+1\n    // click++\n    this.setState({click: click%colorlist.length, color: colorlist[click-1]});\n  }\n\n  render() {\n    var sectionStyle ={\n      background : this.state.color\n    }\n    return(\n      <div style={sectionStyle} className=\"clickbox\" onClick={this.colorChanger.bind(this)}><h1>{this.state.color}</h1></div>\n    )\n  }\n}\nexport default BoxItem\n","import React, { Component } from 'react';\r\nimport BoxItem from './BoxItem'\r\n\r\nclass Box extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\tconsole.log(\"Box num\", this.props.boxNo)\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst a=[]\r\n\t\tfor(let i=0;i<this.props.boxNo;i++){\r\n\t\t\ta.push(\"\")\r\n\t\t}\r\n\r\n\t\treturn(\r\n\t\t\t<div className =\"container\">\r\n\t\t\t\t{a.map(i=>{return <BoxItem colorlist={this.props.colorlist} />})}\r\n\t      \t</div>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default Box;\r\n","import React, { Component } from 'react';\r\nimport BoxItem from './BoxItem';\r\n\r\nclass BoxAdder extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      boxArray :[<BoxItem/>]\r\n    }\r\n  }\r\n\r\n  addBox(){\r\n    let {boxArray} = this.state\r\n    if (boxArray.length < 5){\r\n    boxArray.push(<BoxItem/>)}\r\n    this.setState({boxArray: boxArray})\r\n  }\r\n\r\n  removeBox(){\r\n    let {boxArray} = this.state\r\n    if (boxArray.length > 1){\r\n    boxArray.pop()}\r\n    this.setState({boxArray: boxArray})\r\n  }\r\n\r\n  render(){\r\n\r\n\r\n    return (\r\n      <div>\r\n      <div className=\"add\">\r\n      {this.state.boxArray}\r\n      </div>\r\n      <div className=\"btnToolbar Buttons\" id=\"Buts\">\r\n      <div color=\"add\" onClick={this.addBox.bind(this)}>+</div>\r\n      // <div color=\"danger\"  onClick={this.removeBox.bind(this)}></div>\r\n      </div>\r\n      </div>\r\n      )\r\n    }\r\n\r\n}\r\n\r\nexport default BoxAdder","import React, { Component } from 'react';\nimport './App.css';\nimport BoxItem from './BoxItem'\nimport BoxList from './BoxList'\nimport BoxAdder from './BoxAdder'\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      color: \"\",\n      click: 0,\n      boxNum:3,\n      colors: [\"aliceblue\",\"antiquewhite\",\"aqua\",\"aquamarine\",\"azure\",\"beige\",\"bisque\",\"black\",\"blanchedalmond\",\"blue\",\"blueviolet\",\"brown\",\"burlywood\",\"cadetblue\",\"chartreuse\",\"chocolate\",\"coral\",\"cornflowerblue\",\"cornsilk\",\"crimson\",\"cyan\",\"darkblue\",\"darkcyan\",\"darkgoldenrod\",\"darkgray\",\"darkgreen\",\"darkkhaki\",\"darkmagenta\",\"darkolivegreen\",\"darkorange\",\"darkorchid\",\"darkred\",\"darksalmon\",\"darkseagreen\",\"darkslateblue\",\"darkslategray\",\"darkturquoise\",\"darkviolet\",\"deeppink\",\"deepskyblue\",\"dimgray\",\"dodgerblue\",\"firebrick\",\"floralwhite\",\"forestgreen\",\"fuchsia\",\"gainsboro\",\"ghostwhite\",\"gold\",\"goldenrod\",\"gray\",\"green\",\"greenyellow\",\"honeydew\",\"hotpink\",\"indianred\",\"indigo\",\"ivory\",\"khaki\",\"lavender\",\"lavenderblush\",\"lawngreen\",\"lemonchiffon\",\"lightblue\",\"lightcoral\",\"lightcyan\",\"lightgoldenrodyellow\",\"lightgreen\",\"lightgrey\",\"lightpink\",\"lightsalmon\",\"lightseagreen\",\"lightskyblue\",\"lightslategray\",\"lightsteelblue\",\"lightyellow\",\"lime\",\"limegreen\",\"linen\",\"magenta\",\"maroon\",\"mediumaquamarine\",\"mediumblue\",\"mediumorchid\",\"mediumpurple\",\"mediumseagreen\",\"mediumslateblue\",\"mediumspringgreen\",\"mediumturquoise\",\"mediumvioletred\",\"midnightblue\",\"mintcream\",\"mistyrose\",\"moccasin\",\"navajowhite\",\"navy\",\"oldlace\",\"olive\",\"olivedrab\",\"orange\",\"orangered\",\"orchid\",\"palegoldenrod\",\"palegreen\",\"paleturquoise\",\"palevioletred\",\"papayawhip\",\"peachpuff\",\"peru\",\"pink\",\"plum\",\"powderblue\",\"purple\",\"red\",\"rosybrown\",\"royalblue\",\"saddlebrown\",\"salmon\",\"sandybrown\",\"seagreen\",\"seashell\",\"sienna\",\"silver\",\"skyblue\",\"slateblue\",\"slategray\",\"snow\",\"springgreen\",\"steelblue\",\"tan\",\"teal\",\"thistle\",\"tomato\",\"turquoise\",\"violet\",\"wheat\",\"white\",\"whitesmoke\",\"yellow\",\"yellowgreen\"]\n      // colors : [\"green\", \"blue\", \"yellow\", \"red\", \"purple\", \"white\", \"gray\", \"orange\", \"lightblue\"]\n    }\n  }\n\n  updateNumber(boxNum){\n    this.setState({boxNum:boxNum})\n  }\n\n  handleChange(e) {\n    this.state.updateNumber(e.target.value)\n  }\n\n  render() {\n    console.log(\"App Color: \", this.state.colors)\n    return (\n      <div className=\"App\">\n        <div><h1>Color Change Box</h1></div>\n        <div>\n          <div className=\"butt\" id=\"add\">Add</div><div className=\"butt\" id=\"remove\">Remove</div>\n        </div> \n        <BoxList colorlist={this.state.colors} boxNo={this.state.boxNum} />\n        <BoxAdder />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}