{"version":3,"sources":["BoxItem.js","BoxList.js","Button.js","App.js","serviceWorker.js","index.js"],"names":["BoxItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","colorChanger","_this$state","state","click","colorList","color","Math","floor","random","length","setState","console","log","sectionStyle","background","react_default","a","createElement","style","className","onClick","Component","Box","boxArray","map","i","src_BoxItem","addBox","removeBox","App","push","pop","boxNum","colors","Button","BoxList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6adac13d.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass BoxItem extends Component {\n  constructor(props){\n    super(props)\n    this.state ={\n      colorList: this.props.colorList,\n      click: 0,\n      color: this.props.colorList[Math.floor(Math.random()*this.props.colorList.length)]\n    }\n  }\n\n\n  colorChanger = (props) => {\n    // var color = this.props.colorlist[click]\n    var {click, colorList, color} = this.state\n    click=Math.floor(Math.random()*colorList.length)\n    // click++\n    this.setState({click: click%colorList.length, color: colorList[click]});\n  console.log(\"color: \", this.state.color)\n  }\n\n  render() {\n\n    var sectionStyle ={\n      background : this.state.color\n    }\n    return(\n      <div style={sectionStyle} className=\"clickbox\" onClick={this.colorChanger}><h3>{this.state.color}</h3></div>\n    )\n  }\n}\nexport default BoxItem\n","import React, { Component } from 'react';\r\nimport BoxItem from './BoxItem'\r\n\r\nclass Box extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst a=this.props.boxArray;\r\n\t\treturn(\r\n\t\t\t<div className =\"container\">\r\n\t\t\t\t{a.map(i=>{return <BoxItem colorList={this.props.colorList} />})}\r\n\t      \t</div>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default Box;\r\n","import React, { Component} from 'react';\r\n\r\nclass Box extends Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div className=\"button-container\">\r\n\t\t\t    {/*add and remove buttons with function cneection*/}\r\n\t\t\t\t<button onClick={this.props.addBox}>Add Box</button>\r\n\t\t\t\t<button onClick={this.props.removeBox}>Remove Box</button>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Box;","import React, { Component } from 'react';\nimport './App.css';\nimport BoxItem from './BoxItem'\nimport BoxList from './BoxList'\nimport Button from './Button'\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      color: \"\",\n      click: 0,\n      boxNum:3,\n      boxArray :[<BoxItem/>, <BoxItem/>, <BoxItem/>, <BoxItem/>],\n      colors: [\"aliceblue\",\"antiquewhite\",\"aqua\",\"aquamarine\",\"azure\",\"beige\",\"bisque\",\"black\",\"blanchedalmond\",\"blue\",\"blueviolet\",\"brown\",\"burlywood\",\"cadetblue\",\"chartreuse\",\"chocolate\",\"coral\",\"cornflowerblue\",\"cornsilk\",\"crimson\",\"cyan\",\"darkblue\",\"darkcyan\",\"darkgoldenrod\",\"darkgray\",\"darkgreen\",\"darkkhaki\",\"darkmagenta\",\"darkolivegreen\",\"darkorange\",\"darkorchid\",\"darkred\",\"darksalmon\",\"darkseagreen\",\"darkslateblue\",\"darkslategray\",\"darkturquoise\",\"darkviolet\",\"deeppink\",\"deepskyblue\",\"dimgray\",\"dodgerblue\",\"firebrick\",\"floralwhite\",\"forestgreen\",\"fuchsia\",\"gainsboro\",\"ghostwhite\",\"gold\",\"goldenrod\",\"gray\",\"green\",\"greenyellow\",\"honeydew\",\"hotpink\",\"indianred\",\"indigo\",\"ivory\",\"khaki\",\"lavender\",\"lavenderblush\",\"lawngreen\",\"lemonchiffon\",\"lightblue\",\"lightcoral\",\"lightcyan\",\"lightgoldenrodyellow\",\"lightgreen\",\"lightgrey\",\"lightpink\",\"lightsalmon\",\"lightseagreen\",\"lightskyblue\",\"lightslategray\",\"lightsteelblue\",\"lightyellow\",\"lime\",\"limegreen\",\"linen\",\"magenta\",\"maroon\",\"mediumaquamarine\",\"mediumblue\",\"mediumorchid\",\"mediumpurple\",\"mediumseagreen\",\"mediumslateblue\",\"mediumspringgreen\",\"mediumturquoise\",\"mediumvioletred\",\"midnightblue\",\"mintcream\",\"mistyrose\",\"moccasin\",\"navajowhite\",\"navy\",\"oldlace\",\"olive\",\"olivedrab\",\"orange\",\"orangered\",\"orchid\",\"palegoldenrod\",\"palegreen\",\"paleturquoise\",\"palevioletred\",\"papayawhip\",\"peachpuff\",\"peru\",\"pink\",\"plum\",\"powderblue\",\"purple\",\"red\",\"rosybrown\",\"royalblue\",\"saddlebrown\",\"salmon\",\"sandybrown\",\"seagreen\",\"seashell\",\"sienna\",\"silver\",\"skyblue\",\"slateblue\",\"slategray\",\"snow\",\"springgreen\",\"steelblue\",\"tan\",\"teal\",\"thistle\",\"tomato\",\"turquoise\",\"violet\",\"wheat\",\"white\",\"whitesmoke\",\"yellow\",\"yellowgreen\"]\n    }\n  }\n\n  addBox =( ) =>{\n    let {boxArray} = this.state\n    if (boxArray.length < 20){\n    boxArray.push(<BoxItem/>)}\n    this.setState({boxArray: boxArray})\n  }\n\n  removeBox = ( )=>{\n    let {boxArray} = this.state\n    if (boxArray.length > 0){\n    boxArray.pop()}\n    this.setState({boxArray: boxArray})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div>\n        <h1>Color Change Box</h1>\n        <p>click boxes to change colors</p>\n        </div>\n        <Button  addBox={this.addBox} removeBox={this.removeBox} />\n        <BoxList colorList={this.state.colors} boxArray={this.state.boxArray} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}